{"version":3,"sources":["components/gifs/Gif.js","App.js","serviceWorker.js","index.js"],"names":["Gif","props","react_default","a","createElement","className","isDark","onClick","onToggleThemeClick","onSubmit","e","onSubmitClick","keyword","handleSubmit","type","id","aria-label","onChange","value","document","getElementById","onKeywordChange","autoComplete","required","gifs","length","search","onTrendingButtonClick","onRandomButtonClick","play","onTogglePlayPauseClick","map","gif","index","key","src","images","original","webp","alt","original_still","url","onPaginationButtonClick","page","PropsTypes","array","isRequired","bool","number","string","func","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiKey","apiUrl","initGifs","sort","dataPerPage","handleFetchData","localStorage","getItem","setDarkMode","_this2","axios","get","concat","then","response","setState","data","push","handlePageChange","catch","error","startPage","endPage","i","q","_this3","preventDefault","setItem","removeItem","body","classList","toggle","_this4","gifs_Gif","handleRandomButtonClick","handleTrendingButtonClick","handleKeywordChange","handleTogglePlayPauseClick","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","URL","process","href","origin","addEventListener","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4dc7f3f.chunk.js","sourcesContent":["import React from 'react';\nimport PropsTypes from 'prop-types'\n\nvar inputValue = ''\n\nconst Gif = props => {\n  function onKeywordChange() {\n    var value = document.getElementById('q-search').value;\n    props.onKeywordChange(value);\n  }\n\n  function handleSubmit(e){\n    props.onSubmitClick(e)\n    inputValue = props.keyword;\n  }\n  \n\n  return (\n    <div>\n      <div className=\"konten\">\n        <div className=\"toolBar\">\n          {\n            props.isDark? \n            <span onClick={() => props.onToggleThemeClick(false)} className=\"theme\">⚪️ Light</span> \n            : \n            <span onClick={() => props.onToggleThemeClick(true)} className=\"theme\">⚫️ Dark</span>\n          }\n        </div>\n        <div className=\"serach\">\n          <form className=\"input\" onSubmit={(e) => handleSubmit(e)}>\n            <input type=\"text\" id=\"q-search\" aria-label=\"for submit\" onChange={() => onKeywordChange()} autoComplete=\"off\" required=\"requaired\"/>\n            <button type=\"submit\" id=\"submit\" aria-label=\"for submit\"><i className=\"fa fa-search\"></i></button>\n          </form>\n        </div>\n        <div className=\"toolBar\">\n          <div className=\"sort\">\n            <button id=\"btn-trending\" className={\"button \" + (props.gifs.length > 1 && props.search === false ? 'active' : null)} onClick={() => props.onTrendingButtonClick()}>\n                Trending\n            </button>\n            <button id=\"btn-random\" className={\"button \" + (props.gifs.length === 1 ? 'active' : null)} onClick={() => props.onRandomButtonClick()}>\n                Random\n            </button>\n          </div>\n          <div className=\"togglePlay\">\n              {\n                props.play === true ? \n                <button id=\"btn-play\" className=\"button\" onClick={() => props.onTogglePlayPauseClick()}>\n                  <i className=\"fa fa-pause\"> </i> Pause\n                </button>\n                : \n                <button id=\"btn-play\" className=\"button\" onClick={() => props.onTogglePlayPauseClick()}>\n                  <i className=\"fa fa-play\"></i> Play\n                </button>\n              }\n          </div>\n        </div>\n        <div className=\"content-list\">\n          {\n            props.gifs && props.gifs.map((gif, index) => {\n              return (\n              <div className=\"list-container flat-link\" key={index}>\n                {\n                  props.play && props.play === true ?\n                  <img className=\"img-content\" src={gif.images && gif.images.original.webp} alt=\"\"/>\n                  : <img className=\"img-content\" src={gif.images && gif.images.original_still.url} alt=\"\"/>\n                }\n              </div>\n              )\n            })\n          }\n        </div>\n        {\n          props.gifs.length !== 1 && props.search === false?\n          <ul className=\"roolBar\">\n            <li key=\"1\" onClick={() => props.onPaginationButtonClick('trending', 1)} className={\"pagination \" + (props.page === 1 ? 'active' : '')}>1</li>\n            <li key=\"2\" onClick={() => props.onPaginationButtonClick('trending', 2)} className={\"pagination \" + (props.page === 2 ? 'active' : '')}>2</li>\n            <li key=\"3\" onClick={() => props.onPaginationButtonClick('trending', 3)} className={\"pagination \" + (props.page === 3 ? 'active' : '')}>3</li>\n            <li key=\"4\" onClick={() => props.onPaginationButtonClick('trending', 4)} className={\"pagination \" + (props.page === 4 ? 'active' : '')}>4</li>\n          </ul> : null\n        }\n      </div>\n    </div>\n  )\n}\n\nGif.PropsTypes = {\n  gifs: PropsTypes.array.isRequired,\n  play: PropsTypes.bool.isRequired,\n  search: PropsTypes.bool.isRequired,\n  page: PropsTypes.number.isRequired,\n  keyword: PropsTypes.string.isRequired,\n  isDark: PropsTypes.bool.isRequired,\n\n  onRandomButtonClick: PropsTypes.func.isRequired,\n  onTrendingButtonClick: PropsTypes.func.isRequired,\n  onPaginationButtonClick: PropsTypes.func.isRequired,\n  onKeywordChange: PropsTypes.func.isRequired,\n  onSubmitClick: PropsTypes.func.isRequired,\n  onTogglePlayPauseClick: PropsTypes.func.isRequired,\n  onToggleThemeClick: PropsTypes.func.isRequired,\n}\n\nexport default Gif","import React, {Component} from 'react';\nimport '../src/assets/css/gif.css'\nimport Gif from './components/gifs/Gif';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor (props){\n    super(props)\n    this.state = {\n      apiKey: 'api_key=exrDmJlcqkjSLUwHLf5YHYX7Kr9uJRI5',\n      apiUrl: 'https://api.giphy.com/v1/gifs/',\n      initGifs: [],\n      gifs: [],\n      sort: 'trending',\n      search: false,\n      keyword: '',\n      page: 1,\n      play: true,\n      isDark: false,\n      dataPerPage: 10,\n    }\n  }\n\n  componentDidMount(){\n    this.handleFetchData('trending')\n    if(localStorage.getItem('preferredTheme') === 'dark') {\n      this.setDarkMode(true)\n    }\n  }\n\n  handleFetchData(sort){\n    axios.get(`${this.state.apiUrl}${this.state.sort}?${this.state.apiKey}&limit=200&rating=G`)\n    .then(response => {     \n      if (this.state.sort === 'trending') {        \n        this.setState({initGifs: response.data.data, sort: sort});        \n        return 'trending';\n      }else{\n        let gifs = [];\n        gifs.push(response.data.data);\n        this.setState({gifs: gifs, sort: sort});\n      }\n    })\n    .then((sort) => {\n      this.handlePageChange(sort, 1)\n    })\n    .catch(error => {\n      throw(error);\n    });\n  }\n\n  handleRandomButtonClick(){\n    this.handleFetchData('random');\n  }\n\n  handleTrendingButtonClick(){\n    this.handlePageChange('trending', 1)\n  }\n\n  handlePageChange(sort, page){        \n    if (sort === 'trending') {\n      var gifs = [];\n      var startPage = (this.state.dataPerPage*page) - this.state.dataPerPage;\n      var endPage   =  this.state.dataPerPage*page;\n      for (let i = startPage; i < endPage; i++) {\n        gifs.push(this.state.initGifs[i]);\n      }          \n      this.setState({gifs: gifs, page: page, search: false});  \n    }\n  }\n\n  handleKeywordChange(q){\n    this.setState({keyword: q})    \n  }\n\n  handleSubmit(e){\n    e.preventDefault();\n    const keyword = this.state.keyword;\n    axios.get(`${this.state.apiUrl}search?q=${keyword}&${this.state.apiKey}`)\n    .then(response => {    \n      this.setState({gifs: response.data.data, search: true})\n    })\n    .catch(error => {\n      throw(error);\n    });\n  }\n\n  handleTogglePlayPauseClick(){\n    this.setState({play: !this.state.play})\n  }\n\n  setDarkMode(isDark) {\n    if(isDark) {\n      localStorage.setItem('preferredTheme', 'dark');\n    } else {\n      localStorage.removeItem('preferredTheme');\n    }\n    document.body.classList.toggle(\"darkmode\");\n    this.setState({isDark: isDark})\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Gif \n          gifs={this.state.gifs} \n          page={this.state.page}\n          keyword={this.state.keyword}\n          search={this.state.search}\n          play={this.state.play}\n          isDark={this.state.isDark}\n          onRandomButtonClick={() => this.handleRandomButtonClick()} \n          onTrendingButtonClick={() => this.handleTrendingButtonClick()} \n          onPaginationButtonClick={(sort, page) => this.handlePageChange(sort, page)}\n          onKeywordChange={(q) => this.handleKeywordChange(q)}\n          onSubmitClick={(q) => this.handleSubmit(q)}\n          onTogglePlayPauseClick={() => this.handleTogglePlayPauseClick()}\n          onToggleThemeClick={(isDark) => this.setDarkMode(isDark)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}